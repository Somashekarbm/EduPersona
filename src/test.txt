basic ui for user answering the quizzes-
import json
import streamlit as st

# Load the generated quiz from JSON file
json_file = 'response.json'

def load_json(file_path):
    with open(file_path, 'r') as f:
        json_data = json.load(f)
    return json_data

quiz_data = load_json(json_file)

st.title("Quiz App")

user_answers = {}
for idx, q in enumerate(quiz_data['questions']):
    st.subheader(f"Question {idx + 1}: {q['question']}")
    options = q['choices']
    user_answers[q['question']] = st.radio("Choose an answer:", options)

if st.button('Submit Answers'):
    st.write("Answers submitted successfully!")
    with open('user_answers.json', 'w') as f:
        json.dump(user_answers, f)




-----------------------





quiz-validator.py-
import json
import vertexai
from vertexai.generative_models import GenerationConfig, GenerativeModel
from dotenv import load_dotenv

load_dotenv()

# Set your Vertex AI project ID
project_id = "gemini-practice-sai"
vertexai.init(project=project_id, location="us-central1")

# Load the generated quiz and user answers from JSON files
quiz_file = 'response.json'
user_answers_file = 'user_answers.json'

def load_json(file_path):
    with open(file_path, 'r') as f:
        json_data = json.load(f)
    return json_data

quiz_data = load_json(quiz_file)
user_answers = load_json(user_answers_file)

# Function to prompt the generative model with a given prompt
def prompt(model, prompt_text):
    model_instance = GenerativeModel(model)
    response = model_instance.generate_content(
        prompt_text,
        generation_config=GenerationConfig(response_mime_type="application/json")
    )
    return response.text

# Validate user answers
results = []
for question_data in quiz_data['questions']:
    question = question_data['question']
    correct_answer = question_data['answer']
    user_answer = user_answers.get(question)
    if user_answer:
        result = {
            "question": question,
            "correct_answer": correct_answer,
            "user_answer": user_answer,
            "is_correct": user_answer == correct_answer
        }
        results.append(result)

# Generate a validation prompt for the LLM
validation_prompt = f"Validate the following user answers based on the correct answers:\n{json.dumps(results, indent=2)}"

# Example usage with Vertex AI's generative model
model_name = 'gemini-1.5-pro-001'
validation_response = prompt(model_name, validation_prompt)

# Print the validation response
print(validation_response)

# Optionally, save the validation results
with open('validation_results.json', 'w') as f:
    json.dump(results, f)


---------------------------



content-simplication-

import vertexai
from vertexai.generative_models import GenerationConfig, GenerativeModel
import json
from dotenv import load_dotenv
from pdfminer.high_level import extract_text

load_dotenv()

# Set your Vertex AI project ID
project_id = "gemini-practice-sai"
vertexai.init(project=project_id, location="us-central1")

# Load the validation results and quiz data from JSON files
validation_results_file = 'validation_results.json'
generated_quizzes_file = 'generated_quizzes.json'

def load_json(file_path):
    with open(file_path, 'r') as f:
        json_data = json.load(f)
    return json_data

validation_results = load_json(validation_results_file)
quiz_data = load_json(generated_quizzes_file)

# Function to extract relevant content from PDF
def pdf2text(filepath):
    return extract_text(filepath)

# Function to prompt the generative model with a given prompt
def prompt(model, prompt_text):
    model_instance = GenerativeModel(model)
    response = model_instance.generate_content(
        prompt_text,
        generation_config=GenerationConfig(response_mime_type="application/json")
    )
    return response.text

# Function to simplify content
def simplify_content(model, content, context):
    prompt_text = f"Simplify the following content for better understanding:\n\nContent: {content}\n\nContext: {context}"
    return prompt(model, prompt_text)

# Extract text from the PDF
pdf_filepath = r"notes/SE-M1.pdf"
pdf_content = pdf2text(pdf_filepath)

# Identify incorrect answers
incorrect_answers = [result for result in validation_results if not result['is_correct']]

# Generate simplified content based on incorrect answers
simplified_contents = []
for incorrect in incorrect_answers:
    question_number = incorrect['question-number']
    question_text = incorrect['question']
    correct_answer = incorrect['correct_answer']
    
    # Extract the relevant section from PDF content (assuming we have a way to map questions to sections)
    # For simplicity, we'll assume the entire PDF content is relevant
    simplified_content = simplify_content('gemini-1.5-pro-001', pdf_content, question_text)
    
    simplified_contents.append({
        "question-number": question_number,
        "question": question_text,
        "correct_answer": correct_answer,
        "simplified_content": simplified_content
    })

# Save the simplified contents to a JSON file
simplified_contents_file = 'simplified_contents.json'
with open(simplified_contents_file, 'w') as f:
    json.dump(simplified_contents, f, indent=4)

print("Simplified contents generated and saved successfully.")



-----------


app.py-
import json
import streamlit as st

# Load the generated quiz and simplified contents from JSON files
quiz_file = 'generated_quizzes.json'
simplified_contents_file = 'simplified_contents.json'

def load_json(file_path):
    with open(file_path, 'r') as f:
        json_data = json.load(f)
    return json_data

quiz_data = load_json(quiz_file)
simplified_contents = load_json(simplified_contents_file)

st.title("Quiz App")

user_answers = []
for idx, q in enumerate(quiz_data):
    st.subheader(f"Question {q['question-number']}: {q['question']}")
    options = q['options']
    user_answer = st.radio("Choose an answer:", options, key=idx)
    user_answers.append({
        "question-number": q['question-number'],
        "question": q['question'],
        "answer": user_answer
    })

if st.button('Submit Answers'):
    st.write("Answers submitted successfully!")
    with open('user_answers.json', 'w') as f:
        json.dump(user_answers, f, indent=4)
    
    st.write("Simplified Content for Incorrect Answers:")
    for sc in simplified_contents:
        st.subheader(f"Question {sc['question-number']}: {sc['question']}")
        st.write(f"Simplified Content: {sc['simplified_content']}")